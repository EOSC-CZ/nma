#
# This file is a definition of the CCMM model, as used inside the NMA. It does not
# give the communication ccmm model - there the controlled vocabularies are implemented
# differently (with RDF URIs). The harvesting layer is responsible for converting those
# to the internal ccmm model.
#
# It should be consistent with the xml schema of CCMM release 0.5.0. Where there are
# differences, they are marked with "implementation note" comments.
#
$defs:
  dataset:
    properties:
      iri:
        # implementation note: this IRI will not be shown anywhere in the UI,
        # it is a RDF-only thiing
        type: keyword
      publication_year:
        type: integer
        label.en: Publication year
        help.en: The year when the item was or will be made publicly available.
      versions[]:
        type: keyword
        ^label.en: Version(s) of the dataset
        ^help.en: The version indicator (name or identifier) of a resource.
      descriptions[]:
        type: i18nStr
        ^label.en: Descriptions
        ^help.en: A free-text description of the Dataset.
      title:
        type: keyword
        label.en: Title
        help.en: A name given to the resource.
        required: true
      alternate_titles[]:
        use: ./ccmm.yaml#/$defs/alternate_title
        ^label.en: Alternate titles
      is_described_by[]:
        use: ./ccmm.yaml#/$defs/metadata_record
        ^label.en: Repositories
        ^help.en: Repositories where the dataset is described.
        required: true
        # implementation note: the first one will be the primary repository
        # that should be displayed for example, in search results. Others
        # are secondary repositories (harvesting, such as OpenAIRE etc.)
      identifiers[]:
        use: ./ccmm.yaml#/$defs/identifier
        ^label.en: Dataset identifiers
      locations[]:
        use: ./ccmm.yaml#/$defs/location
        ^label.en: Locations
        ^help.en: The geographical areas covered by the dataset.
      provenances[]:
        use: ./ccmm.yaml#/$defs/provenance_statement
        ^label.en: Provenance statements
        ^help.en: Statements about the lineage of this dataset.
      qualified_relations[]:
        use: ./ccmm.yaml#/$defs/agent_relationship
        ^label.en: Qualified relations
        ^help.en: Relations to agents (such as creators, contributors, publishers)
      time_references[]:
        use: ./ccmm.yaml#/$defs/time_reference
        ^label.en: Time references
      subjects[]:
        use: ./ccmm.yaml#/$defs/subject
        ^label.en: Subjects
      validation_results[]:
        use: ./ccmm.yaml#/$defs/validation_result
        ^label.en: Validation results
      distributions[]:
        use: ./ccmm.yaml#/$defs/distribution
        ^label.en: Distributions
      funding_references[]:
        use: ./ccmm.yaml#/$defs/funding_reference
        ^label.en: Funding references
      terms_of_use:
        use: ./ccmm.yaml#/$defs/terms_of_use
        label.en: Terms of use
      related_resources[]:
        use: ./ccmm.yaml#/$defs/resource
        ^label.en: Related resources
      resource_type:
        use: "./ccmm.yaml#/$defs/vocabulary-resource-types"
        label.en: Resource type
        help.en: Type of the resource from a controlled vocabulary

      primary_language:
        use: "./ccmm.yaml#/$defs/vocabulary-languages"
        label.en: Primary language
        help.en:
          The primary language of the dataset. Might be unfilled if the dataset
          is language neutral.

      other_languages[]:
        use: "./ccmm.yaml#/$defs/vocabulary-languages"
        ^label.en: Other languages
        ^help.en: Other languages of the dataset.

      # TODO: remove this !!!
      # distribution_data_services:
      #   type: array
      #   items:
      #     use: ./ccmm.yaml#/$defs/distribution_data_service
      # distribution_downloadable_files:
      #   type: array
      #   items:
      #     use: ./ccmm.yaml#/$defs/distribution_downloadable_file

  alternate_title:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI
      title[]:
        # implementation note: multilingual title, each language is only once
        type: i18nStr
        ^label.en: Title
        ^help.en: Alternate title.
        required: true
      type:
        use: "./ccmm.yaml#/$defs/vocabulary-title-types"
        label.en: Title Type

  metadata_record:
    properties:
      iri:
        type: keyword
        # note: this IRI will not be shown anywhere in the UI, it is a RDF-only thing
      dates_updated[]:
        type: date
        ^label.en: Dates updated
        ^help.en: Dates on which the resource was changed.
      date_created:
        type: date
        label.en: Date Created
        help.en: The date on which the metadata record was created.
      original_repositories[]:
        use: ./ccmm.yaml#/$defs/repository
        ^label.en: Original repositories
        ^help.en:
          Link to the repository from which the metadata were originally stored
          and curated. Note that this link should go the dataset's landing page,
          not to the repository home page.
      conforms_to_standards[]:
        use: ./ccmm.yaml#/$defs/application_profile
        ^label.en: Conforms to standards
        ^help.en: Established standard to which the metadata record conforms.
      qualified_relations[]:
        use: ./ccmm.yaml#/$defs/agent_relationship
        ^label.en: Qualified relations
        ^help.en: Qualified relations (such as, creator of the metadata, not of the dataset)
      languages[]:
        use: "./ccmm.yaml#/$defs/vocabulary-languages"
        ^label.en: Languages
        ^help.en: Languages of the dataset's metadata

  identifier:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI,

      identifier_scheme:
        use: "./ccmm.yaml#/$defs/vocabulary-identifier-schemes"
        label.en: Identifier scheme
        help.en: Scheme URI of the identifier.
        required: true

      value:
        type: keyword
        label.en: Value
        help.en: Value of the identifer within the given identifier scheme.
          If the value looks like an URL, it must be a resolvable URL.
        required: true
        # implementation note: if the value is an URL, it will be rendered as a link
        # implementation note: even if this value is not an URL, it might get converted
        # during upload to NMA to an URL for known identifier schemes

  location:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI
      bbox:
        use: ./ccmm.yaml#/$defs/ows:BoundingBoxType
        label.en: Bbox
        help.en: Bounding box of the location geometry.
      names[]:
        type: keyword
        ^label.en: Location names
        ^help.en: Names of the spatial location.
        # implementation note: renamed, see https://github.com/EOSC-CZ/CCMM/issues/39
      relation_type:
        use: "./ccmm.yaml#/$defs/vocabulary-location-relation-types"
        label.en: Relation of the location to the dataset
        # implementation note: renamed, see https://github.com/EOSC-CZ/CCMM/issues/39
      geometry:
        use: ./ccmm.yaml#/$defs/geometry
        label.en: Geometry
        help.en: The corresponding geometry for a resource.
      related_objects[]:
        use: ./ccmm.yaml#/$defs/resource
        ^label.en: Objects related to this location
        ^help.en: Objects that are related to this location.

  provenance_statement:
    # implementation note: this is not a vocabulary item, it references an external
    # provenance statement. Will be displayed as a link to the provenance
    properties:
      iri:
        type: keyword
        # implementation note: this url must be resolvable and points to the
        # provenance statement stored in an external system
      labels[]:
        type: i18nStr
        ^label.en: Label
        ^help.en: Provenance state label

  agent_relationship:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI
      role:
        use: "./ccmm.yaml#/$defs/vocabulary-contributor-types"
        label.en: Role of the agent
        help.en: The function of an agent.
        required: true
      organization:
        use: ./ccmm.yaml#/$defs/organization
        # implementation note: the schema 0.5.0 only allows agent here without substitution groups
        # which is probably a mistake, so we allow both organization and person
      person:
        use: ./ccmm.yaml#/$defs/person
        # implementation note: the schema 0.5.0 only allows agent here without substitution groups
        # which is probably a mistake, so we allow both organization and person
        # Also, person is missing from the generated xml schema which is probably a mistake

  person:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI
      name:
        type: keyword
        label.en: Name
        help.en: The name of the person.
          Should be formatted as
          "family names separated by space, comma, given names separated by space".
      family_names[]:
        type: keyword
        ^label.en: Family names
        ^help.en: The family names of the person
        required: true
        # note: hyphenated family names are allowed
        # and must be in a single entry (not split into two family names),
        # e.g. "Smith-Jones"
      given_names[]:
        type: keyword
        ^label.en: Given names
        ^help.en: The given names of the person
      affiliations[]:
        use: ./ccmm.yaml#/$defs/organization
        label.en: Affiliations
        help.en: Affiliations of the person to the organization.
      identifiers[]:
        use: ./ccmm.yaml#/$defs/identifier
        ^label.en: Person identifiers
        ^help.en: Identifiers associated with the person.
      contact_points[]:
        use: ./ccmm.yaml#/$defs/contact_details
        label.en: Contact points
        help.en: Relevant contact information for the person.

  organization:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI
      name:
        type: keyword
        label.en: Name
        help.en: Official organizational name in its primary language.
        required: true
      alternate_names[]:
        type: i18nStr
        ^label.en: Alternate names
        ^help.en: Alternate organizational names in other languages.
      identifiers[]:
        use: ./ccmm.yaml#/$defs/identifier
        ^label.en: Organization identifiers
        ^help.en: Identifiers associated with the organization.
      contact_points[]:
        use: ./ccmm.yaml#/$defs/contact_details
        ^label.en: Contact points
        ^help.en: Relevant contact information for the organization.

  time_reference:
    # implementation note: 0.5.0: schema is not yet settled, so we use
    # the edtf-time type as a base. We will need to update this section
    # when the CCMM is updated.
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI
      date_information:
        type: i18nStr
        label.en: Date information
        help.en: Additional information to the date in text form.
      date_type:
        use: "./ccmm.yaml#/$defs/vocabulary-time-reference-types"
        label.en: Date type
        help.en: Type of the date.
      date:
        type: edtf-time
        label.en: Date
        help.en:
          A point or period of time associated with an event in the lifecycle
          of the resource.
        mapping:
          ignore_malformed: true

  subject:
    properties:
      iri:
        type: keyword
      definitions[]:
        type: i18nStr
        ^label.en: Definition
        ^help.en: Definition of the subject.
      title[]:
        type: i18nStr
        ^label.en: Title
        ^help.en: Title of the subject
        required: true
      classification_code:
        type: keyword
        label.en: Classification code
        help.en:
          The classification code used for the subject term in the subject
          scheme.
        # implementation note: this is not a controlled vocabulary, it is a
        # free text field that is used to store the code of the subject in the
        # subject scheme. We prefer to use resolvable IRIs here but we are not
        # there yet
      scheme:
        use: "./ccmm.yaml#/$defs/vocabulary-subject-schemes"
        label.en: Subject scheme
        help.en:
          A controlled vocabulary or classification scheme used to describe
          the subject of a resource. Concepts have a unique id within the subject scheme.

  validation_result:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI must be resolvable and points to the
        # validation result stored in an external system. It will be displayed
        # as a link to the validation result with the label from the labels field
      labels[]:
        type: i18nStr
        ^label.en: Label
        ^help.en: Validation result label

  distribution:
    use: "./ccmm.yaml#/$defs/distribution_downloadable_file"
    # implementation note: the distribution seems not to be settled in CCMM,
    # so we use the downloadable file as a base. We will need to update this
    # section when the CCMM is updated.

  distribution_downloadable_file:
    properties:
      iri:
        type: keyword
        # implementation note: not shown in UI
      title:
        type: keyword
        label.en: Title
        help.en: A name given to the distributed file.
      byte_size:
        type: long-integer
        label.en: Byte size
        help.en: The size of a distributed file in bytes.
        mapping:
          ignore_malformed: true
      checksum:
        use: "./ccmm.yaml#/$defs/checksum"
        label.en: Checksum
        help.en:
          A mechanism that can be used to verify that the contents of a distribution
          have not changed.
      conforms_to_schemas[]:
        use: ./ccmm.yaml#/$defs/application_profile
        ^label.en: Conforms to schemas
        ^help.en: Established standards to which the distribution conforms.
      media_type:
        use: ./ccmm.yaml#/$defs/vocabulary-media-types
        label.en: IANA Media type
        help.en: The media type of the distribution as defined by IANA
      access_urls[]:
        type: url
        ^label.en: Access URLs
        ^help.en: URLs that give access to the associated file.
      download_urls[]:
        type: url
        ^label.en: Download URLs
        ^help.en: URLs that are direct links to downloadable files in a given format.
      format:
        use: "./ccmm.yaml#/$defs/vocabulary-file-types"
        label.en: Format
        help.en: The file format of the distribution.

  funder:
    properties:
      person:
        use: ./ccmm.yaml#/$defs/person
        label.en: Person
        help.en: The person who is the funder or sponsor of the award (grant).
      organization:
        use: ./ccmm.yaml#/$defs/organization
        label.en: Organization
        help.en: The organization that is the funder or sponsor of the award (grant).

  funding_reference:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI
      funding_program:
        type: keyword
        label.en: Funding program
        help.en: Reference to the specific funding program.
      award_title:
        type: keyword
        label.en: Award title
        help.en: The human readable title or name of the award (grant).
      local_identifier:
        type: keyword
        label.en: Local identifier
        help.en: The code assigned by the funder to a sponsored award (grant).
      funders[]:
        use: ./ccmm.yaml#/$defs/funder
        ^label.en: Funders
        ^help.en: The funder or sponsor of the award (grant) that is funding the
          resource. This can be either a person or an organization.
  terms_of_use:
    properties:
      iri:
        type: keyword
      description[]:
        type: i18nStr
        label.en: Description
        help.en: Descriptive text on details of rights and licensing.
        # implementation note: in 0.5.0 it is a plain string, not multilingual
      license:
        use: "./ccmm.yaml#/$defs/license_document"
        label.en: License
        help.en: Information about licensing details of the resource.
      access_rights:
        use: "./ccmm.yaml#/$defs/vocabulary-access-rights"
        label.en: Access rights
        help.en:
          Information about who access the resource or an indication of its
          security status.
      contacts[]:
        use: ./ccmm.yaml#/$defs/contact
        ^label.en: Contacts
        ^help.en: Contact person/organization for the further details about the terms of use.

  contact:
    properties:
      organization:
        use: ./ccmm.yaml#/$defs/organization
      person:
        use: ./ccmm.yaml#/$defs/person

  license_document:
    # implementation note: this is not a vocabulary item, it references an external
    # license document. Will be displayed as a link to the license document
    # with the label from the labels field
    properties:
      iri:
        type: keyword
      labels[]:
        type: i18nStr
        ^label.en: Label
        ^help.en: Address label

  resource:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI,
        # it is a RDF-only thing
      title:
        type: keyword
        label.en: Title
        help.en: A name given to the resource.
      resource_url:
        type: url
        label.en: Resource URL
        help.en:
          A URL that points to the resource, preferably containing human-readable
          information about the resource.
      qualified_relations[]:
        use: ./ccmm.yaml#/$defs/agent_relationship
        ^label.en: Qualified relations
        ^help.en: Attachment of resource to the relationship.
      time_references[]:
        use: ./ccmm.yaml#/$defs/time_reference
        ^label.en: Time references
      identifiers[]:
        use: ./ccmm.yaml#/$defs/identifier
        ^label.en: Identifiers
        ^help.en: Identifiers associated with the resource.
      relation_type:
        use: "./ccmm.yaml#/$defs/vocabulary-relation-types"
        label.en: Relation type
        help.en: Type of the relation between Dataset and related resource.
      type:
        use: "./ccmm.yaml#/$defs/vocabulary-resource-types"
        label.en: Type
        help.en:
          A description of the resource. Gets the value from controlled list
          https://datacite-metadata-schema.readthedocs.io/en/4.6/appendices/appendix-1/resourceTypeGeneral/.

  checksum:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI
      algorithm:
        use: "./ccmm.yaml#/$defs/vocabulary-checksum-algorithms"
        label.en: Algorithm
        help.en: The algorithm used to calculate the checksum.
        required: true
      value:
        type: keyword
        label.en: Value
        help.en: The value of the checksum, encoded as a hex binary
        required: true

  contact_details:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will not be shown anywhere in the UI
      dataBoxes[]:
        type: keyword
        ^label.en: Data boxes
        ^help.en: Codes of the data boxes.
      emails[]:
        type: keyword
        ^label.en: Emails
        ^help.en: Email addresses.
      phones[]:
        type: keyword
        ^label.en: Phones
        ^help.en: Phone numbers
      addresses[]:
        use: ./ccmm.yaml#/$defs/address
        ^label.en: Addresses
        ^help.en: Addresses

  address:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will be shown as a link to the address
        # somewhere. The label will be the address label
      labels[]:
        type: i18nStr
        ^label.en: Label
        ^help.en: Address label
        # implementation note: multilingual

      full_address:
        type: keyword
        label.en: Full address
        help.en: The complete address written as a string, with or without formatting.

      po_box:
        type: keyword
        label.en: PO box
        help.en: The Post Office Box number.

      thoroughfares[]:
        type: keyword
        ^label.en: Thoroughfares
        ^help.en: The thoroughfare(s) of the address, such as street, road, avenue etc. A thoroughfare is not necessarily a road, it might be a waterway or some other feature.

      locator_designators[]:
        type: keyword
        ^label.en: Locator designators
        ^help.en: A number or a sequence of characters that uniquely identifies the locator within the relevant scope(s). The full identification of the locator could include one or more locator designators.

      locator_names[]:
        type: keyword
        ^label.en: Locator names
        ^help.en: Proper noun(s) applied to the real world entity identified by the locator. The locator name could be the name of the property or complex, of the building or part of the building, or it could be the name of a room inside a building.

      address_areas[]:
        type: keyword
        ^label.en: Address areas
        ^help.en: The name or names of a geographic area or locality that groups a number of addressable objects for addressing purposes, without being an administrative unit. This would typically be part of a city, a neighbourhood or village.

      post_names[]:
        type: keyword
        ^label.en: Post names
        ^help.en: The key postal division of the address, usually the city. (INSPIRE's definition is "One or more names created and maintained for postal purposes to identify a subdivision of addresses and postal delivery points.")

      administrative_unit_level_1:
        type: keyword
        label.en: Administrative unit level 1
        help.en: The uppermost administrative unit for the address, almost always a country. The range is a literal, conceptually defined by the INSPIRE Geographical Name data type.

      administrative_unit_level_2:
        type: keyword
        label.en: Administrative unit level 2
        help.en: The region of the address, usually a county, state or other such area that typically encompasses several localities. The range is a literal, conceptually defined by the INSPIRE Geographical Name data type.

      post_code:
        type: keyword
        label.en: Post code
        help.en: The post code (a.k.a postal code, zip code etc.). Post codes are common elements in many countries' postal address systems.

  application_profile:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will must be resolvable and points to the
        # application profile stored in an external system. It will be displayed
        # as a link to the application profile with the label from the labels field
      labels[]:
        type: i18nStr
        ^label.en: Label
        ^help.en: Label of application profile

  geometry:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI will must be resolvable and points to the
        # application profile stored in an external system. It will be displayed
        # as a link to the application profile with the label from the labels field
      labels[]:
        type: i18nStr
        ^label.en: Label
        ^help.en: Label of the geometry

  ows:BoundingBoxType:
    properties:
      LowerCorners[]:
        type: float
        required: true
      UpperCorners[]:
        type: float
        required: true
      crs:
        type: url
      dimensions:
        type: integer

  repository:
    properties:
      iri:
        type: keyword
        # implementation note: this IRI is a URL of the record within the repository,
        # it will be displayed as a link to the repository record.
        # the labels should be the repository name
      labels[]:
        type: i18nStr
        ^label.en: Repository name
        ^help.en: Repository name

  #
  # Vocabularies
  #

  vocabulary:
    type: vocabulary
    marshmallow:
      class: common.services.schema.CCMMVocabularySchema
      generate: false
    ui:
      marshmallow:
        class: common.services.ui_schema.CCMMVocabularyUISchema
        generate: false
    keys:
      - id
      - title
      - props.iri
  vocabulary-languages:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: languages
    marshmallow:
      class: common.services.schema.CCMMLanguagesVocabularySchema
  vocabulary-resource-types:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: resource-types
    marshmallow:
      class: common.services.schema.CCMMResourceTypesVocabularySchema
  vocabulary-contributor-types:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: contributor-types
    marshmallow:
      class: common.services.schema.CCMMContributorTypesVocabularySchema
  vocabulary-relation-types:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: relation-types
    marshmallow:
      class: common.services.schema.CCMMRelationTypesVocabularySchema
  vocabulary-time-reference-types:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: time-reference-types
    marshmallow:
      class: common.services.schema.CCMMTimeReferenceTypesVocabularySchema
  vocabulary-access-rights:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: access-rights
    marshmallow:
      class: common.services.schema.CCMMAccessRightsVocabularySchema
  vocabulary-file-types:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: file-types
    marshmallow:
      class: common.services.schema.CCMMFileTypesVocabularySchema
  vocabulary-subject-schemes:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: subject-schemes
    marshmallow:
      class: common.services.schema.CCMMSubjectSchemesVocabularySchema
  vocabulary-identifier-schemes:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: identifier-schemes
    marshmallow:
      class: common.services.schema.CCMMIdentifierSchemesVocabularySchema
  vocabulary-title-types:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: title-types
    marshmallow:
      class: common.services.schema.CCMMTitleTypesVocabularySchema
  vocabulary-checksum-algorithms:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: checksum-algorithms
    marshmallow:
      class: common.services.schema.CCMMChecksumAlgorithmsVocabularySchema
  vocabulary-media-types:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: media-types
    marshmallow:
      class: common.services.schema.CCMMMediaTypesVocabularySchema
  vocabulary-location-relation-types:
    use: "./ccmm.yaml#/$defs/vocabulary"
    vocabulary-type: location-relation-types
    marshmallow:
      class: common.services.schema.CCMMLocationRelationTypesVocabularySchema
